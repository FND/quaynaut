// XXX: using `$height: $width` rather than the inverse to avoid duplicate keys
$ratios: (
	3: 4,
	9: 16,
	10: 16
);

html,
body,
quay-naut {
	height: 100%;
	margin: 0;
	padding: 0;
}

quay-naut {
	display: block;
	counter-reset: slides;

	@each $height, $width in $ratios {
		$ratio: $width / $height;

		&.ratio#{$width}-#{$height} {
			width: calc(100vh * #{$ratio});
			margin: 0 auto;

			// swap constraint if viewport is taller than wide (proportionally)
			// FIXME: does not affect `vh` units (namely `font-size`)
			@media screen and (max-width: #{100vh * $ratio}) {
				& {
					width: auto;
					height: calc(100vw / #{$ratio});
					margin-top: calc((100vh - 100vw / #{$ratio}) / 2); // center vertically
				}
			}
		}
	}

	& article {
		counter-increment: slides;
		display: block;
		box-sizing: border-box;
		position: relative;
		height: 100%;
		overflow: hidden;
		border: 4px solid #808080;
	}

	&.presentation article {
		border: none;

		&:not(:target) {
			position: absolute;
			top: -300vh;
			left: -300vw;
			width: 0;
			height: 0;
			overflow: hidden;
			margin: 0;
			padding: 0;
		}
	}
}

.quaynaut-toggle {
	position: absolute;
	top: 1em;
	right: 1em;
	text-decoration: none;
}

.quaynaut-nav {
	position: absolute;
	bottom: 1em;
	right: 1em;

	a {
		overflow: hidden;
		font-size: 0;
		text-decoration: none;
		color: #808080;
	}
	a:after {
		font-size: 2rem;
	}
	a[rel=prev]:after {
		content: "←";
	}
	a[rel=self]:after {
		content: counter(slides);
	}
	a[rel=next]:after {
		content: "→";
	}
}
