// XXX: using `$height: $width` rather than the inverse to avoid duplicate keys
$ratios: (
	3: 4,
	9: 16,
	10: 16
);

html,
body,
quay-naut {
	height: 100%;
	margin: 0;
	padding: 0;
}

quay-naut {
	display: block;
	counter-reset: slides;

	@each $height, $width in $ratios {
		$ratio: $width / $height;

		&.ratio#{$width}-#{$height} {
			width: calc(100vh * #{$ratio});
			margin: 0 auto;

			// swap constraint if viewport is taller than wide (proportionally)
			// FIXME: does not affect `vh` units (namely `font-size`)
			@media screen and (max-width: #{100vh * $ratio}) {
				& {
					width: auto;
					height: calc(100vw / #{$ratio});
					margin-top: calc((100vh - 100vw / #{$ratio}) / 2); // center vertically
				}
			}
		}
	}

	& article {
		counter-increment: slides;
		display: block;
		box-sizing: border-box;
		position: relative;
		height: 100%;
		overflow: hidden;
		border: 4px solid #808080;
	}

	&.presentation:not(.speaker-view) article {
		border: none;

		&:not(:target) {
			position: absolute;
			transform: scale(0);
		}
	}

	&.speaker-view article {
		position: absolute;
		transform: scale(0);

		&:target,
		&:target + article {
			position: static;
			transform: scale(0.6);
			transform-origin: top left;
		}
		&:target + article {
			transform: translate(60%, -90%) scale(0.4);
		}

		.quaynaut-nav a[rel=prev],
		.quaynaut-nav a[rel=next] {
			display: none;
		}
	}
}

.quaynaut-toggle {
	position: absolute;
	top: 1em;
	right: 1em;
	text-decoration: none;
}

.quaynaut-nav {
	display: grid;
	position: absolute;
	bottom: 1em;
	right: 1em;
	grid-template-areas: "prev self next";
	grid-template-columns: 1fr 1fr 1fr;

	a {
		overflow: hidden;
		font-size: 0;
		text-align: center;
		text-decoration: none;
		color: #808080;
	}
	a:after {
		font-size: 2rem;
	}
	a[rel=prev] {
		grid-area: prev;

		&:after {
			content: "←";
		}
	}
	a[rel=self] {
		grid-area: self;

		&:after {
			content: counter(slides);
		}
	}
	a[rel=next] {
		grid-area: next;

		&:after {
			content: "→";
		}
	}
}
